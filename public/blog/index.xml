<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on José Caique</title>
    <link>/blog/</link>
    <description>Recent content in Blog on José Caique</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Jun 2024 11:53:01 -0300</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Strong skipping mode by default</title>
      <link>/blog/strong-skip/</link>
      <pubDate>Sun, 16 Jun 2024 11:53:01 -0300</pubDate>
      <guid>/blog/strong-skip/</guid>
      <description>Recent updates from compose introduced compose strong skipping mode, which makes the compose much more efficient to deal with recomposition. Let&amp;rsquo;s validate it with a simple example.&#xA;The most easy way to force recomposition it&amp;rsquo;s passing a List as a parameter to some compose function as follows:&#xA;@Composable fun Listing(values: List&amp;lt;String&amp;gt;) { Column { values.forEach { Text(text = it) } } } Every time that some recomposition happens this function will recompose.</description>
    </item>
    <item>
      <title>Roadmap android</title>
      <link>/blog/roadmap/</link>
      <pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate>
      <guid>/blog/roadmap/</guid>
      <description>As described in the youtube video here you can find the android roadmap. Try your best to get a solid understanding of what are you studing, so when the time pass you will for sure become a strong android dev. Fingers crossed!</description>
    </item>
    <item>
      <title>Keep your feature simple</title>
      <link>/blog/simple/</link>
      <pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate>
      <guid>/blog/simple/</guid>
      <description>Introduction There is a natural tendency to define patterns that facilitate the development of new features in order to maintain a certain consistency among the various functionalities of an application. Such patterns can be useful, for example, when adding a new team member who may find it easier to contribute to a project since every functionality has more or less the same structure.&#xA;However, it is essential to always think about the utility that a piece of code adds to the project.</description>
    </item>
  </channel>
</rss>
